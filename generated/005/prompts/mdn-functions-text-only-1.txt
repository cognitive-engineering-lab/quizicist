Based on the text between the =====, generate 5 multiple-choice questions to test a reader's comprehension of the text's concepts

=====

textBox.addEventListener('keydown', function(event) {
  console.log(`You pressed "${event.key}".`);
});

If you pass an anonymous function like this, there's an alternative form you can use, called an arrow function. Instead of function(event), you write (event) =>:
textBox.addEventListener('keydown', (event) => {
  console.log(`You pressed "${event.key}".`);
});

If the function only has one line in the curly brackets, you omit the curly brackets:
textBox.addEventListener('keydown', (event) => console.log(`You pressed "${event.key}".`));

If the function only takes one parameter, you can also omit the brackets around the parameter:
textBox.addEventListener('keydown', event => console.log(`You pressed "${event.key}".`));

Finally, if your function needs to return a value, and contains only one line, you can also omit the return statement. In the following example we're using the map() method of Array to double every value in the original array:
const originals = [1, 2, 3];

const doubled = originals.map((item) => item * 2);

console.log(doubled); // [2, 4, 6]

The map() method takes each item in the array in turn, passing it into the given function. It then takes the value returned by that function and adds it to a new array.
So in the example above, (item) => item * 2 is the arrow function equivalent of:
function doubleItem(item) {
  return item * 2;
}

We recommend that you use arrow functions, as they can make your code shorter and more readable. To learn more, see the section on arrow functions in the JavaScript guide, and our reference page on arrow functions.
Here's a complete working example of the "keydown" example we discussed above:
The HTML:


The JavaScript:
const textBox = document.querySelector("#textBox");
const output = document.querySelector("#output");

textBox.addEventListener('keydown', (event) => output.textContent = `You pressed "${event.key}".`);

div {
  margin: 0.5rem 0;
}

The result - try typing into the text box and see the output:
Arrow function live sample
Let's talk a bit about scope — a very important concept when dealing with functions. When you create a function, the variables and other things defined inside the function are inside their own separate scope, meaning that they are locked away in their own separate compartments, unreachable from code outside the functions.
The top level outside all your functions is called the global scope. Values defined in the global scope are accessible from everywhere in the code.
JavaScript is set up like this for various reasons — but mainly because of security and organization. Sometimes you don't want variables to be accessible from everywhere in the code — external scripts that you call in from elsewhere could start to mess with your code and cause problems because they happen to be using the same variable names as other parts of the code, causing conflicts. This might be done maliciously, or just by accident.
For example, say you have an HTML file that is calling in two external JavaScript files, and both of them have a variable and a function defined that use the same name:



// first.js
const name = 'Chris';
function greeting() {
  alert(`Hello ${name}: welcome to our company.`);
}

// second.js
const name = 'Zaptec';
function greeting() {
  alert(`Our company is called ${name}.`);
}

Both functions you want to call are called greeting(), but you can only ever access the first.js file's greeting() function (the second one is ignored). In addition, an error results when attempting (in the second.js file) to assign a new value to the name variable — because it was already declared with const, and so can't be reassigned.
Keeping parts of your code locked away in functions avoids such problems, and is considered the best practice.
It is a bit like a zoo. The lions, zebras, tigers, and penguins are kept in their own enclosures, and only have access to the things inside their enclosures — in the same manner as the function scopes. If they were able to get into other enclosures, problems would occur. At best, different animals would feel really uncomfortable inside unfamiliar habitats — a lion or tiger would feel terrible inside the penguins' watery, icy domain. At worst, the lions and tigers might try to eat the penguins!
Four different animals enclosed in their respective habitat in a Zoo
The zoo keeper is like the global scope — they have the keys to access every enclosure, to restock food, tend to sick animals, etc.
Let's look at a real example to demonstrate scoping.
First, make a local copy of our function-scope.html example. This contains two functions called a() and b(), and three variables — x, y, and z — two of which are defined inside the functions, and one in the global scope. It also contains a third function called output(), which takes a single parameter and outputs it in a paragraph on the page.
Open the example up in a browser and in your text editor.
Open the JavaScript console in your browser developer tools. In the JavaScript console, enter the following command:
output(x);

You should see the value of variable x printed to the browser viewport.
Now try entering the following in your console
output(y);
output(z);

Both of these should throw an error into the console along the lines of "ReferenceError: y is not defined". Why is that? Because of function scope — y and z are locked inside the a() and b() functions, so output() can't access them when called from the global scope.
However, what about when it's called from inside another function? Try editing a() and b() so they look like this:
function a() {
  const y = 2;
  output(y);
}

function b() {
  const z = 3;
  output(z);
}

Save the code and reload it in your browser, then try calling the a() and b() functions from the JavaScript console:
a();
b();

You should see the y and z values printed in the browser viewport. This works fine, as the output() function is being called inside the other functions — in the same scope as the variables it is printing are defined in, in each case. output() itself is available from anywhere, as it is defined in the global scope.
Now try updating your code like this:
function a() {
  const y = 2;
  output(x);
}

function b() {
  const z = 3;
  output(x);
}

Save and reload again, and try this again in your JavaScript console:
a();
b();

Both the a() and b() call should print the value of x to the browser viewport. These work fine because even though the output() calls are not in the same scope as x is defined in, x is a global variable so is available inside all code, everywhere.
Finally, try updating your code like this:
function a() {
  const y = 2;
  output(z);
}

function b() {
  const z = 3;
  output(y);
}

Save and reload again, and try this again in your JavaScript console:
a();
b();

This time the a() and b() calls will throw that annoying ReferenceError: variable name is not defined error into the console — this is because the output() calls and the variables they are trying to print are not in the same function scopes — the variables are effectively invisible to those function calls.

You've reached the end of this article, but can you remember the most important information? You can find some further tests to verify that you've retained this information before you move on — see Test your skills: Functions. These tests require skills that are covered in the next two articles, so you might want to read those first before trying it.
This article has explored the fundamental concepts behind functions, paving the way for the next one in which we get practical and take you through the steps to building up your own custom function.
Functions detailed guide — covers some advanced features not included here.
Functions reference
Default parameters, Arrow functions — advanced concept references

Learn/JavaScript/Building_blocks
Making decisions in your code — conditionals
Looping code
Functions — reusable blocks of code
Build your own function
Function return values
Introduction to events
Image gallery



=====
5 multiple-choice questions: