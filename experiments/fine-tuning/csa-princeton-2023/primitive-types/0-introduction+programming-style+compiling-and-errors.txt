Computer Science (CS) is an official name used for many aspects of computing, usually on the developing end; its areas include computer programming, which is exactly what we will be doing in AP Computer Science A (APCS). APCS focuses on the language Java and its components, and in many cases, you will be the programmer. Although the person using your program (the user) will typically see only the end result of your program, CS gives you the tools to write statements (code) that will ideally make the user’s experience both functional and enjoyable. 
Computer programming is similar to a foreign language; it has nouns, verbs, and other parts of speech, and it has different forms of style, just like speaking languages. Just as you might use different words and ways of speaking—tone, expressions, etc.—with your family versus your friends, CS has many different languages and, within each language, its own ways of getting the job done. In both the CS world and the APCS world, a particular programming style is expected in order to show fluency in the language. A company that might hire you for a CS job will likely expect you to conform to its own unique programming style; similarly, the College Board will expect you to conform to its accepted programming style based on its research of CS styles accepted at universities around the world. 
Commenting is an extremely vital style technique in the programming world. Comments do not actually cause the program to behave any differently, however, comments serve many purposes, including: allowing programmers to make “notes” within the program that they may want to reference later allowing the person reading and/or using the program (“the reader” and/or “the user”) to understand the code in a less cryptic way, when applicablerevealing to the programmer/reader/user aspects of the program that are required to make the program operate as intended and/or are produced as a result of the program’s execution 
There are two types of commenting in Java. In-line, or short, comments appear after or near a statement and are preceded by two forward slashes (“//”) followed by the comment. Long comments that extend beyond a single line of code are surrounded by special characters; they begin with (“/*”) and end with (“*/”). 

For example, 
// This is a short comment 
/* This is a 
long comment */ 

Identifiers are names that are given to represent data stored in the memory of the computer during the program’s execution. Rather than using a nonsensical memory address code to reference data, Java allows the programmer to name an identifier to perform this job. When we name identifiers in Java, there are guidelines that we must use and guidelines that the College Board expects us to use: 
An identifier may contain any combination of letters, numbers, and underscore (“_”), but must begin with a letter and may not contain any other characters than these, including spaces. An identifier should be a logical name that corresponds to the data it is associated with; for example, an identifier associated with the side of a triangle would be more useful as side1 instead of s. An identifier should begin with a lowercase letter and, if it is composed of several words, should denote each subsequent word with a capital letter. If we decided to create an identifier associated with our triangle’s number of sides, numberOfSides or numOfSides would conform to this style; NumberOfSides and numofsides would not.

White space is another element of style that does not affect the overall functionality of the program. Rather, it enhances the readability of the program by allowing the programmer to space out the code to separate specific statements or tasks from others. Much like a book may leave empty space at the end of a chapter and begin the next chapter on the next page without affecting the overall story, white space has a similar effect. 
When the programmer writes Java code, statements are written that are understood within a Java development environment. The computer, however, does not understand this language, much like you would likely not understand a foreign language that you have never studied, spoken in its native environment. Therefore, an interpreter is used within the developer environment, enabling the computer to understand the Java code. A computer operates using code written only in binary (zeroes and ones, literally!), and so the interpreter “translates” your Java code into binary. This process is called compiling. As a result, in most instances as well as on the AP Exam, modern computer programmers do not need to understand binary code directly. 
When an interactive development environment (“IDE”) is used to compile your code, the code will be automatically checked for basic programming errors. If an error is found within the code, the compiling is halted and an error message is produced (this feedback is where the “interactive” part comes in); this situation is called a compile-time error. Although the error message/code is not always helpful in a direct way, it does allow the programmer to troubleshoot the issue in a more directed way. Unfortunately, since the AP Exam is a pencil-and-paper test, you will have access to neither a computer nor a compiler. Your code must be absent of errors in order to receive full credit for the response (or any credit if it’s a multiple-choice question).
A logical error is more difficult to troubleshoot, as opposed to a problem with the syntax of the Java code itself. A logical error lies in the desired output/purpose of the program. Similar to ordering dinner and receiving a perfectly prepared dessert instead, you are getting a good result, but it is not appropriate for the desired task. 
A run-time error is an error that is not caught by the compiler, yet produces an error during the execution of the program. In many ways, this is the worst (and most embarrassing) error for the programmer, because it is not realized until the task is supposedly “done.” An example might be a crash that occurs when you are editing your favorite image in a graphics program. It’s frustrating for the user and annoying for the programmer when you leave negative feedback on the company’s website! 
