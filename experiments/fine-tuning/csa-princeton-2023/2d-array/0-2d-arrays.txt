Two-dimensional, or 2D, arrays are structures that have entered, exited, and re-entered the required topics for the AP Exam. They are quite powerful and, at the same time, not too difficult to understand once you have mastered 1D array structures, which we studied in Chapter 8. 
A great example of a 2D array is a stand-up soda machine, like you see in the mall or in front of the supermarket. You know the type, the one in which you drop money and hope desperately that the soda actually drops out. 
Think of the soda machine as a set of rows across the machine, each having a different type of soda (let’s say that the first row has cola, second has orange, etc.). Each of those rows can be considered an array. Now consider the vertical columns down the machine; each column will have one of each type of soda, since it travels down the rows (first item is cola, second item is orange, etc.). That vertical column can also be considered an array. The result is an “array of arrays,” which Java quantifies as a 2D array, with index numbers assigned independently to each row and column location. 
In the soda machine example, the very first cola in the upper left location of the 2D array would be located at index 0 of the first horizontal array, as well as index 0 of the first vertical array. The code to access this element (soda) in a 2D array (soda machine) already instantiated as sodaMachine would be soda-Machine[0][0], with the first 0 being the row and the second 0 being the column. The second cola would be located at [0][1], and the first orange would be located at [1][0], and so on. For an m by n 2D array, with m being the number of rows and n being the number of columns, the last element in the lower right corner would be located at [m - 1][n - 1]. But you didn’t forget that index numbers begin at 0 and end at (array.length - 1), did you?
The methods and constants available for use with array structures are available for 2D array structures as well, because a 2D array is an array— just a fancy one. It’s a little tricky, however; in order to, say, return the number of cola slots across the soda machine, you would use sodaMachine.length, as expected. In order to access the number of slots down the left side of the machine, however, you would use sodaMachine[0].length, meaning you want the length of the first column of the 2D array. 
